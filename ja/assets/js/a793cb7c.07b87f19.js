"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4490],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,m=p["".concat(u,".").concat(h)]||p[h]||d[h]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},442:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:3},i="Designing Reusable Modules",s={unversionedId:"architecting-projects/designing-module",id:"architecting-projects/designing-module",title:"Designing Reusable Modules",description:"Modules are a part of a program, that designed to be handle only one task.",source:"@site/docs/6-architecting-projects/designing-module.md",sourceDirName:"6-architecting-projects",slug:"/architecting-projects/designing-module",permalink:"/Kassets/ja/architecting-projects/designing-module",draft:!1,editUrl:"https://github.com/kadinche/Kassets/tree/docs/main/Documentation/docs/6-architecting-projects/designing-module.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Design Patterns",permalink:"/Kassets/ja/architecting-projects/design-patterns"}},u={},l=[{value:"Input",id:"input",level:3},{value:"Process",id:"process",level:3},{value:"Output",id:"output",level:3}],c={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"designing-reusable-modules"},"Designing Reusable Modules"),(0,o.kt)("p",null,"Modules are a part of a program, that designed to be handle only one task.\nThink of it as a way to conform the Single Responsibility Principle, in which a module has one responsibility.\nBy designing and creating a module properly, you can reuse modules in different projects, not limited to just one."),(0,o.kt)("p",null,"Using Kassets, you can design reusable modules quite easily.\nThe three key points for creating modules are Input, Process, Output."),(0,o.kt)("h3",{id:"input"},"Input"),(0,o.kt)("p",null,"Use Kassets instance as an input to be processed.\nYou can easily replace from which instance the input come from, which can be very useful when doing an isolated testing."),(0,o.kt)("h3",{id:"process"},"Process"),(0,o.kt)("p",null,"This is the core of your module, where the process of the input data happened.\nFor simplicity, this would be the MonoBehavior components that has Kassets instance as an input, and optionally an output."),(0,o.kt)("h3",{id:"output"},"Output"),(0,o.kt)("p",null,"Use Kassets instance as the output of the module.\nOutput are optional, because not every module has them.\nOutput should belong to the module, whereas input can be anywhere and replacable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'public class SampleModule : MonoBehaviour\n{\n    [Header("Input")]\n    [SerializeField] private IntGameEvent _inputValue;\n\n    [Header("Output")]\n    [SerializeField] private FloatVariable _outputValue;\n    \n    [Header("Local Fields")]\n    [SerializeField] private TMP_Text _displayText;\n    \n    private IDisposable _subscription;\n\n    private void Start()\n    {\n        // Module starts with a subscription to the Input \n        _subscription = _inputValue.Subscribe(ProcessInput);\n    }\n\n    private void ProcessInput(int value)\n    {\n        // processes the Input value according to each module\'s requirements.\n        var processedValue = value * 0.5f;\n        \n        // optionally handle the processed value within internal components.\n        _displayText.text = value.ToString();\n        \n        // send the processed value as an Output that can be accessed from outside the module.\n        _outputValue.Value = processedValue;\n    }\n\n    private void OnDestroy()\n    {\n        _subscription.Dispose();\n    }\n}\n')),(0,o.kt)("p",null,"There's no limitation on the size of the module.\nYou can always put several Inputs and/or Outputs, and other internal MonoBehavior components.\nFreely adjust according to the needs of the module."))}d.isMDXComponent=!0}}]);