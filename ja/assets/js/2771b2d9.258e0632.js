"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2119],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=s.createContext({}),c=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return s.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},b=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(n),b=r,m=u["".concat(p,".").concat(b)]||u[b]||d[b]||i;return n?s.createElement(m,a(a({ref:t},l),{},{components:n})):s.createElement(m,a({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=b;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,a[1]=o;for(var c=2;c<i;c++)a[c]=n[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}b.displayName="MDXCreateElement"},5498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=n(7462),r=(n(7294),n(3905));const i={sidebar_position:5},a="Pull vs Push Subscription",o={unversionedId:"getting-started/pull-push-subscription",id:"getting-started/pull-push-subscription",title:"Pull vs Push Subscription",description:"UniTask v2 has support for Asynchronous LINQ.",source:"@site/docs/2-getting-started/pull-push-subscription.md",sourceDirName:"2-getting-started",slug:"/getting-started/pull-push-subscription",permalink:"/Kassets/ja/getting-started/pull-push-subscription",draft:!1,editUrl:"https://github.com/kadinche/Kassets/tree/docs/main/Documentation/docs/2-getting-started/pull-push-subscription.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Asynchronous with UniTask",permalink:"/Kassets/ja/getting-started/async-unitask"},next:{title:"Command",permalink:"/Kassets/ja/kassets-core/command"}},p={},c=[],l={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pull-vs-push-subscription"},"Pull vs Push Subscription"),(0,r.kt)("p",null,"UniTask v2 has support for Asynchronous LINQ.\nAsynchronous LINQ is an extension to ",(0,r.kt)("inlineCode",{parentName:"p"},"IUniTaskAsyncEnumerable<T>")," and its usage can be very similar to UniRx,\nbut the process behind it is different (UniRx is push-based while UniTask is pull-based)."),(0,r.kt)("p",null,"Kassets' ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptableObject")," also make use of Asynchronous LINQ.\nKassets' ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptableObject")," derived from ",(0,r.kt)("inlineCode",{parentName:"p"},"IUniTaskAsyncEnumerable<T>")," so it is possible to directly apply\nvarious features of UniTask as explained in its ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Cysharp/UniTask#asyncenumerable-and-async-linq"},"github page")," or from this ",(0,r.kt)("a",{parentName:"p",href:"https://speakerdeck.com/torisoup/unitask2020?slide=110"},"slide")," (Japanese)."),(0,r.kt)("p",null,"When using pull-based subscriptions of UniTask.Linq, when the process of handling an event is still running,\nit won't be called again until it is over, no matter how many times the event has been raised during the process.\nReversely, push-based subscriptions of UniRx will execute every event raise."),(0,r.kt)("p",null,"When both UniRx and UniTask are imported together, It can be confusing which of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscription")," behavior is in effect (pull-based or push-based?).\nTo use Kassets' instance as ",(0,r.kt)("inlineCode",{parentName:"p"},"IObservable"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"AsObservable()"),".\nTo use Kassets' instance as ",(0,r.kt)("inlineCode",{parentName:"p"},"IUniTaskAsyncEnumerable")," use ",(0,r.kt)("inlineCode",{parentName:"p"},"AsAsyncEnumerable()"),".\nUnless referenced by interface, Kassets instances Default Subscribe Behavior can be selected from the inspector window."),(0,r.kt)("p",null,"Note that UniTask Asynchronous LINQ is part of ",(0,r.kt)("inlineCode",{parentName:"p"},"Cysharp.Threading.Tasks.Linq")," namespace.\nTo use, add ",(0,r.kt)("inlineCode",{parentName:"p"},"UniTask.Linq")," as reference to your project's Assembly Definition."),(0,r.kt)("img",{width:"514",alt:"Screenshot 2023-06-12 at 16 49 31",src:"https://github.com/kadinche/Kassets/assets/1290720/dea3da9d-cc3e-45a2-82a5-e590cfca84ee"}))}d.isMDXComponent=!0}}]);